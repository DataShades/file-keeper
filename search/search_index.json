{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Abstraction layer for reading, writing, and managing file-like objects.</p> <p>The package implements adapters for several storage types(local filesystem, redis, AWS S3, etc.) and defines a set of tools to simplify building your own adapters for the storage you are using.</p>"},{"location":"#installation","title":"Installation","text":"<p>The library is available at PyPI and can be installed via your favorite python package manager:</p> <pre><code>pip install file-keeper\n</code></pre> <p>To keep list of dependencies short, by default file-keeper supports only those storage types, that rely only on python's standard library(filesystem, ). If you need other options, specify package extras during installation:</p> Provider Extras Example AWS S3 s3 <code>pip install 'file-keeper[s3]'</code> Apache Libcloud libcloud <code>pip install 'file-keeper[libcloud]'</code> Apache OpenDAL opendal <code>pip install 'file-keeper[opendal]'</code> Google Cloud Storage gcs <code>pip install 'file-keeper[gcs]'</code> Redis redis <code>pip install 'file-keeper[redis]'</code> SQLAlchemy sqlalchemy <code>pip install 'file-keeper[sqlalchemy]'</code>"},{"location":"#usage","title":"Usage","text":"<p>The main object required for managing files is a storage. Storage initialized using a mapping with settings that contains the type of the underlying driver. And, depending on the driver itself, additional options may be required: FS storage needs the path inside the filesystem, while cloud storages would ask you to provide bucket names, secrets, etc.</p>"},{"location":"#local-filesystem","title":"Local filesystem","text":"<p>Let's use the filesystem driver, which is called <code>file_keeper:fs</code>. This driver requires the <code>path</code> of a root directory where uploaded files are stored. If given path does not exist, the storage will raise an error during initialization. We can either create the directory in advance manually, or enable <code>create_path</code> option of the storage, to automatically add missing folders instead of raising an exception.</p> <p>To initialize the storage, one must call <code>make_storage</code> function, that accepts the name of the storage(used internally for making readable error messages) and the mapping with settings.</p> <pre><code>from file_keeper import make_storage\n\nstorage = make_storage(\"sandbox\", {\n    \"type\": \"file_keeper:fs\",\n    \"path\": \"/tmp/example\",\n    \"create_path\": True,\n})\n</code></pre> <p>Now we need at least one file uploaded into the storage via it's <code>upload</code> method. This method requires the location of the upload and the <code>Upload</code> object with the content. This upload object can be created using <code>make_upload</code> function - just pass bytes, <code>BytesIO</code> or file-like object into it.</p> <pre><code>from file_keeper import make_upload\n\nupload = make_upload(b\"hello world\")\ninfo = storage.upload(\"hello.txt\", upload)\n</code></pre> <p><code>upload</code> method has produced <code>info</code> object of type <code>FileData</code>. This is a dataclass that contains the most essential details about the new upload: location, size, content type and content hash. You need this object to get the file back from the storage.</p> <p>If you don't have such object, but you are sure that there is a file in storage available at the certain location, <code>hello.txt</code> for example, you can build such info object on your own. You don't even need size or content type - just providing the location should be enough:</p> <pre><code>from file_keeper import FileData\n\ninfo = FileData(\"hello.txt\")\n</code></pre> <p>Now, when you have <code>info</code> object, use it to:</p> <ul> <li> <p>read the file</p> <pre><code>content = storage.content(info)\nassert content == b\"hello world\"\n</code></pre> </li> <li> <p>move the file to a new location. Note, this method produces a new <code>info</code>   object that we'll use from now on to access the file. Previous <code>info</code> is no   longer required as it points to non-existing location</p> <pre><code>info = storage.move(\"moved-hello.txt\", info)\n</code></pre> </li> <li> <p>remove the file</p> <pre><code>storage.remove(info)\n</code></pre> </li> </ul> <p>If you want to use a different storage adapter, initialize a different storage. All other operations remain the same.</p>"},{"location":"#redis","title":"Redis","text":"<p>Let's try Redis storage, which is available if you installed file-keeper with <code>redis</code> extras:</p> <pre><code>pip install 'file-keeper[redis]'\n</code></pre> <p>The adapter is called <code>file_keeper:redis</code>. It expects Redis DB to be available at <code>redis://localhost:6379/0</code>(which can be changed via <code>url</code> option). And it also requires <code>path</code> option, but here it will be used as a name of HASH where all the files are stored Redis.</p> <pre><code>from file_keeper import make_storage, make_upload\n\nstorage = make_storage(\"sandbox\", {\n    \"type\": \"file_keeper:redis\",\n    \"path\": \"files-from-file-keeper\"\n})\n\nupload = make_upload(b\"hello world\")\n\ninfo = storage.upload(\"hello.txt\", upload)\nassert info.size == 11\n\ncontent = storage.content(info)\nassert content == b\"hello world\"\n\nstorage.remove(info)\n# method that checks whether the file exists in the storage\nassert not storage.exists(info)\n</code></pre>"},{"location":"#cloud","title":"Cloud","text":"<p>Finally, let's check cloud storage. There are multiple options, but we'll use Apache Libcloud adapter. To make it available, install file-keeper with <code>libcloud</code> extras:</p> <pre><code>pip install 'file-keeper[libcloud]'\n</code></pre> <p>The adapter is called <code>file_keeper:libcloud</code>. Unlike previous adapters, it has a lot of options and majority of them are required:</p> <ul> <li><code>provider</code>: name of Apache Libcloud   provider</li> <li><code>params</code>: mapping with additional parameters specific for the chosen provider</li> <li><code>key</code>: access key for the cloud storage</li> <li><code>secret</code>: access secret for the cloud storage</li> <li><code>container_name</code>: name of the container/bucket where files are stored</li> </ul> <p>Requirements regarding this options are not the same for different storage providers. We'll use <code>MINIO</code> provider(because it's free). For this example, we assume that MINIO is running locally, on 9000 port, without SSL. You can create a Docker container using the command below:</p> <pre><code>docker run -p 9000:9000 -p 9001:9001 \\\n    --name minio -e MINIO_PUBLIC_ADDRESS=0.0.0.0:9000 \\\n    quay.io/minio/minio server /data --console-address \":9001\"\n</code></pre> <p>Details about this local MinIO service will be encoded into <code>params</code> option: <code>{\"host\": \"127.0.0.1\", \"port\": 9000, \"secure\": False}</code>.</p> <p>Create MinIO credentials using WebUI available at http://127.0.0.1:9001 and add them as <code>key</code> and <code>secret</code> options.</p> <p>Finally, create a bucket <code>file-keeper</code> and specify it using <code>container_name</code> option.</p> <p>That's how initialization will look when all preparations are done:</p> <pre><code>storage = make_storage(\"sandbox\", {\n    \"type\": \"file_keeper:libcloud\",\n    \"provider\": \"MINIO\",\n    \"params\": {\"host\": \"127.0.0.1\", \"port\": 9000, \"secure\": False},\n    \"key\": \"***\",\n    \"secret\": \"***\",\n    \"container_name\": \"file-keeper\",\n})\n</code></pre> <p>Note</p> <p><code>file_keeper:libcloud</code> adapter does not support <code>move</code> operation and you'll see an exception upon calling <code>storage.move</code>.</p> <p>Instead of using <code>file_keeper:libcloud</code>, you can try <code>file_keeper:s3</code> adapter that relies on boto3 and is available when file-keeper is installed with <code>s3</code> extras:</p> <pre><code>pip install 'file-keeper[s3]'\n</code></pre> <p>Unlike <code>file_keeper:libcloud</code>, <code>s3</code> adapter works only with AWS S3(and MinIO that has identical API). But it supports wider list of storage operations, so it worth using it if you know that you are not going to use different cloud provider.</p> <p>Initialization is slighly different for <code>file_keeper:s3</code>:</p> <ul> <li>use <code>bucket</code> instead of <code>container_name</code></li> <li>add <code>endpoint</code> that combines <code>params.host</code> and <code>params.port</code> from <code>file_keeper:libcloud</code></li> </ul> <pre><code>from file_keeper import make_storage\n\nstorage = make_storage(\"sandbox\", {\n    \"type\": \"file_keeper:s3\",\n    \"endpoint\": \"http://127.0.0.1:9000\",\n    \"key\": \"***\",\n    \"secret\": \"***\",\n    \"bucket\": \"file-keeper\",\n})\n</code></pre> <p>With <code>file_keeper:s3</code> you can use <code>move</code> and can replicate all operations used in previous examples.</p>"}]}